openapi: 3.0.3
info:
  title: OMS API (Catering & Beauty) â€“ DB Parity
  version: 1.1.2
  description: |
    Order Management System API for merchants in catering & beauty verticals.
    **Tenant scope**: pass `X-Merchant-Id` when a user owns/has access to multiple merchants.

    ---
    ### Deletion & deactivation (soft-delete convention)
    For resources marked as soft-deletable, `DELETE` **deactivates** the resource instead of removing it from the database.
    - The server sets an internal inactive flag (e.g., `isActive=false`) or a `deletedAt` timestamp.
    - `DELETE` is **idempotent** and returns **204 No Content** even if the resource is already inactive.
    - **List** endpoints exclude inactive records by default. To include them, pass `includeInactive=true`.
      Some lists also support `active` filters where present.
    - **GET by ID** on an inactive resource returns **404 Not Found**.
    - Where business rules prevent deactivation (e.g., ledger integrity, dependent open references), the server returns **409 Conflict**.
servers:
  - url: https://api.oms.com/v1
security:
  - BearerAuth: []
tags:
  - name: auth
  - name: users
  - name: merchants
  - name: customers
  - name: catalog.products
  - name: catalog.services
  - name: reservations
  - name: orders
  - name: order.items
  - name: order.discounts
  - name: order.tips
  - name: payments
  - name: refunds
  - name: discounts
  - name: giftcards
  - name: service-charges
  - name: pricing
  - name: tax
  - name: subscriptions
  - name: plans
  - name: features

paths:
  /auth/login:
    post:
      security: []
      tags: [auth]
      summary: Login and obtain access/refresh tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Access granted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/refresh:
    post:
      security: []
      tags: [auth]
      summary: Exchange a refresh token for a new access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: New access token issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    required: [accessToken, expiresIn, tokenType]
                    properties:
                      accessToken: { type: string }
                      expiresIn: { type: integer, example: 3600 }
                      tokenType: { type: string, example: Bearer }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/logout:
    post:
      tags: [auth]
      summary: Revoke the current refresh token (and optionally all)
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                allSessions:
                  type: boolean
                  description: Revoke all refresh tokens for this user
                  default: false
      responses:
        '204':
          description: Logged out (refresh token revoked)
        '401': { $ref: '#/components/responses/Unauthorized' }

  # ----------------- Users & Employee-Service mapping -----------------
  /users:
    get:
      tags: [users]
      summary: List users (optionally filter by role)
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
        - $ref: '#/components/parameters/RoleFilter'
        - $ref: '#/components/parameters/IncludeInactive'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/User' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /users/{userId}:
    get:
      tags: [users]
      summary: Get user by ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/User' }
        '404': { $ref: '#/components/responses/NotFound' }

  /users/{userId}/services:
    get:
      tags: [users]
      summary: List services the employee can perform (Employee_Service)
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Services assigned to the employee
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Service' }
    post:
      tags: [users]
      summary: Assign a service to an employee
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [serviceId]
              properties:
                serviceId: { type: string }
      responses:
        '204': { description: Assigned }
        '404': { $ref: '#/components/responses/NotFound' }

  /users/{userId}/services/{serviceId}:
    delete:
      tags: [users]
      summary: Unassign a service from an employee
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  # ----------------- Merchants & subscriptions -----------------
  /merchants:
    get:
      tags: [merchants]
      summary: List merchants accessible to the caller
      parameters:
        - $ref: '#/components/parameters/IncludeInactive'
      responses:
        '200':
          description: Merchants
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Merchant' }
    post:
      tags: [merchants]
      summary: Create merchant
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MerchantCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Merchant' }

  /merchants/{merchantId}:
    get:
      tags: [merchants]
      summary: Get a merchant
      parameters:
        - $ref: '#/components/parameters/MerchantId'
      responses:
        '200':
          description: Merchant
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Merchant' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      tags: [merchants]
      summary: Update a merchant
      parameters:
        - $ref: '#/components/parameters/MerchantId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MerchantUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Merchant' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [merchants]
      summary: Delete merchant
      description: Soft-delete (set inactive). Idempotent.
      parameters:
        - $ref: '#/components/parameters/MerchantId'
      responses:
        '204': { description: Deleted }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /merchants/{merchantId}/restore:
    post:
      tags: [merchants]
      summary: Restore merchant
      description: Reactivate a soft-deleted merchant.
      parameters:
        - $ref: '#/components/parameters/MerchantId'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }

  /merchants/{merchantId}/subscriptions:
    get:
      tags: [subscriptions]
      summary: Get subscriptions for a merchant
      parameters:
        - $ref: '#/components/parameters/MerchantId'
      responses:
        '200':
          description: Subscriptions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/MerchantSubscription' }
    post:
      tags: [subscriptions]
      summary: Create or switch subscription for a merchant
      parameters:
        - $ref: '#/components/parameters/MerchantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [planId, startsAt]
              properties:
                planId: { type: string }
                startsAt: { type: string, format: date-time }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/MerchantSubscription' }

  /merchants/{merchantId}/subscriptions/{subscriptionId}:
    delete:
      tags: [subscriptions]
      summary: Delete (cancel/deactivate) a merchant subscription
      description: Soft-delete (deactivate) the subscription. Idempotent.
      parameters:
        - $ref: '#/components/parameters/MerchantId'
        - $ref: '#/components/parameters/SubscriptionId'
      responses:
        '204': { description: Deleted }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  # ----------------- Customers -----------------
  /customers:
    get:
      tags: [customers]
      summary: List customers
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
        - in: query
          name: q
          schema: { type: string }
          description: Name/email/phone search
        - $ref: '#/components/parameters/IncludeInactive'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Customer' }
    post:
      tags: [customers]
      summary: Create customer
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Customer' }

  /customers/{id}:
    get:
      tags: [customers]
      summary: Get customer
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Customer
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Customer' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      tags: [customers]
      summary: Update customer
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Customer' }
    delete:
      tags: [customers]
      summary: Delete customer
      description: Soft-delete (set inactive). Idempotent.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /customers/{id}/restore:
    post:
      tags: [customers]
      summary: Restore customer
      description: Reactivate a soft-deleted customer.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }

  # ----------------- Catalog: Products -----------------
  /products:
    get:
      tags: [catalog.products]
      summary: List products
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
        - in: query
          name: taxCategoryId
          schema: { type: string, nullable: true }
        - in: query
          name: active
          schema: { type: boolean }
        - $ref: '#/components/parameters/IncludeInactive'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Product' }
    post:
      tags: [catalog.products]
      summary: Create product
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Product' }

  /products/{id}:
    get:
      tags: [catalog.products]
      summary: Get product
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Product
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Product' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      tags: [catalog.products]
      summary: Update product
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Product' }
    delete:
      tags: [catalog.products]
      summary: Delete product
      description: Soft-delete (set inactive). Idempotent.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /products/{id}/restore:
    post:
      tags: [catalog.products]
      summary: Restore product
      description: Reactivate a soft-deleted product.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }

  # ----------------- Catalog: Services -----------------
  /services:
    get:
      tags: [catalog.services]
      summary: List services
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
        - in: query
          name: taxCategoryId
          schema: { type: string, nullable: true }
        - in: query
          name: active
          schema: { type: boolean }
        - $ref: '#/components/parameters/IncludeInactive'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Services
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Service' }
    post:
      tags: [catalog.services]
      summary: Create service
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ServiceCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Service' }

  /services/{id}:
    get:
      tags: [catalog.services]
      summary: Get service
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Service
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Service' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      tags: [catalog.services]
      summary: Update service
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ServiceUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Service' }
    delete:
      tags: [catalog.services]
      summary: Delete service
      description: Soft-delete (set inactive). Idempotent.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /services/{id}/restore:
    post:
      tags: [catalog.services]
      summary: Restore service
      description: Reactivate a soft-deleted service.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }

  # ----------------- Reservations -----------------
  /reservations:
    get:
      tags: [reservations]
      summary: List reservations
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
        - in: query
          name: employeeId
          schema: { type: string, nullable: true }
        - in: query
          name: customerId
          schema: { type: string, nullable: true }
        - in: query
          name: serviceId
          schema: { type: string, nullable: true }
        - in: query
          name: status
          schema: { $ref: '#/components/schemas/AppointmentStatus' }
        - $ref: '#/components/parameters/IncludeInactive'
        - $ref: '#/components/parameters/From'
        - $ref: '#/components/parameters/To'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Reservations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Reservation' }
    post:
      tags: [reservations]
      summary: Create reservation
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReservationCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Reservation' }

  /reservations/{id}:
    get:
      tags: [reservations]
      summary: Get reservation
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Reservation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Reservation' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      tags: [reservations]
      summary: Update reservation (time/status)
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReservationUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Reservation' }
    delete:
      tags: [reservations]
      summary: Delete reservation
      description: Soft-delete (set inactive). Idempotent.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /reservations/{id}/restore:
    post:
      tags: [reservations]
      summary: Restore reservation
      description: Reactivate a soft-deleted reservation.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }

  # ----------------- Orders & items -----------------
  /orders:
    get:
      tags: [orders]
      summary: List orders
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
        - in: query
          name: customerId
          schema: { type: string, nullable: true }
        - in: query
          name: employeeId
          schema: { type: string, nullable: true }
        - in: query
          name: status
          schema: { $ref: '#/components/schemas/OrderStatus' }
        - $ref: '#/components/parameters/From'
        - $ref: '#/components/parameters/To'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Order' }
    post:
      tags: [orders]
      summary: Create order (status = OPEN)
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Order' }

  /orders/{id}:
    get:
      tags: [orders]
      summary: Get order
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Order
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Order' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      tags: [orders]
      summary: Update order (close/cancel or set policy/discount refs)
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Order' }
    delete:
      tags: [orders]
      summary: Delete order
      description: |
        Delete is only allowed for draft/empty orders (e.g., status=OPEN with no payments/refunds/fulfillments). 
        Otherwise returns 409 Conflict. Not a soft-delete; prefer status transitions (cancel/close/refund).
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /orders/{orderId}/items:
    get:
      tags: [order.items]
      summary: List items for an order
      parameters:
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: Items
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/OrderItem' }
    post:
      tags: [order.items]
      summary: Add item to order
      parameters:
        - $ref: '#/components/parameters/OrderId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderItemCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/OrderItem' }

  /orders/{orderId}/items/{itemId}:
    get:
      tags: [order.items]
      summary: Get order item
      parameters:
        - $ref: '#/components/parameters/OrderId'
        - $ref: '#/components/parameters/ItemId'
      responses:
        '200':
          description: Item
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/OrderItem' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      tags: [order.items]
      summary: Update order item (qty/price/reservation/discount)
      parameters:
        - $ref: '#/components/parameters/OrderId'
        - $ref: '#/components/parameters/ItemId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderItemUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/OrderItem' }
    delete:
      tags: [order.items]
      summary: Remove order item
      parameters:
        - $ref: '#/components/parameters/OrderId'
        - $ref: '#/components/parameters/ItemId'
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  # --------- Apply discounts (order-level and item-level) ----------
  /orders/{orderId}/discounts:
    get:
      tags: [order.discounts]
      summary: Get whole-order discount(s) applied to an order
      description: Returns an array with at most one discount; empty if none applied.
      parameters:
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: Applied whole-order discounts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    maxItems: 1
                    items: { $ref: '#/components/schemas/Discount' }
        '404': { $ref: '#/components/responses/NotFound' }
    post:
      tags: [order.discounts]
      summary: Apply a whole-order discount to an order
      parameters:
        - $ref: '#/components/parameters/OrderId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [discountId]
              properties:
                discountId: { type: string }
      responses:
        '204': { description: Applied }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [order.discounts]
      summary: Remove whole-order discount
      parameters:
        - $ref: '#/components/parameters/OrderId'
      responses:
        '204': { description: Removed }

  # ----------------- Tips -----------------
  /orders/{orderId}/tips:
    get:
      tags: [order.tips]
      summary: List tips for an order
      parameters:
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: Tips
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/OrderTip' }
    post:
      tags: [order.tips]
      summary: Add a tip to an order
      parameters:
        - $ref: '#/components/parameters/OrderId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderTipCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/OrderTip' }

  /orders/{orderId}/tips/{tipId}:
    delete:
      tags: [order.tips]
      summary: Remove a tip from an order
      parameters:
        - $ref: '#/components/parameters/OrderId'
        - $ref: '#/components/parameters/TipId'
      responses:
        '204': { description: Deleted }
        '404': { $ref: '#/components/responses/NotFound' }

  # ----------------- Payments & refunds -----------------
  /orders/{orderId}/payments:
    get:
      tags: [payments]
      summary: List payments for an order
      parameters:
        - $ref: '#/components/parameters/OrderId'
        - $ref: '#/components/parameters/IncludeInactive'
      responses:
        '200':
          description: Payments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Payment' }
    post:
      tags: [payments]
      summary: Create a payment for an order
      parameters:
        - $ref: '#/components/parameters/OrderId'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PaymentCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Payment' }

  /payments/{paymentId}:
    get:
      tags: [payments]
      summary: Get payment
      parameters:
        - $ref: '#/components/parameters/PaymentId'
      responses:
        '200':
          description: Payment
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Payment' }
        '404': { $ref: '#/components/responses/NotFound' }

    patch:
      tags: [payments]
      summary: Update payment (allowed transitions/fields only)
      description: |
        Update limited fields (e.g., status transitions, marking failure) while preserving ledger integrity.
        Server validates state machine and returns 409 on invalid transitions.
      parameters:
        - $ref: '#/components/parameters/PaymentId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PaymentUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Payment' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

    delete:
      tags: [payments]
      summary: Delete (void) payment
      description: |
        Soft-delete/void a payment (idempotent). Returns 409 when business rules prevent deletion
        (e.g., settled payout, dependent refunds not voided).
      parameters:
        - $ref: '#/components/parameters/PaymentId'
        - $ref: '#/components/parameters/IdempotencyKey'
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /payments/{paymentId}/restore:
    post:
      tags: [payments]
      summary: Restore payment
      description: Reactivate a soft-deleted/voided payment (idempotent).
      parameters:
        - $ref: '#/components/parameters/PaymentId'
        - $ref: '#/components/parameters/IdempotencyKey'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /payments/{paymentId}/refunds:
    get:
      tags: [refunds]
      summary: List refunds for a payment
      parameters:
        - $ref: '#/components/parameters/PaymentId'
        - $ref: '#/components/parameters/IncludeInactive'
      responses:
        '200':
          description: Refunds for the payment
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Refund' }
        '404': { $ref: '#/components/responses/NotFound' }
    post:
      tags: [refunds]
      summary: Create refund for a payment
      parameters:
        - $ref: '#/components/parameters/PaymentId'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefundCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Refund' }

  /refunds/{id}:
    get:
      tags: [refunds]
      summary: Get a refund by ID
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Refund
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Refund' }
        '404': { $ref: '#/components/responses/NotFound' }

    patch:
      tags: [refunds]
      summary: Update refund (reason/amount before settlement)
      description: |
        Update limited fields (e.g., reason; amount only if not settled and within original payment/remaining limits).
        Returns 409 on invalid updates or ledger violations.
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefundUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Refund' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

    delete:
      tags: [refunds]
      summary: Delete (void) refund
      description: |
        Soft-delete/void a refund (idempotent). Returns 409 when business rules prevent deletion
        (e.g., settled payout; ledger integrity).
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/IdempotencyKey'
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /refunds/{id}/restore:
    post:
      tags: [refunds]
      summary: Restore refund
      description: Reactivate a soft-deleted/voided refund (idempotent).
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/IdempotencyKey'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  # ----------------- Giftcards -----------------
  /giftcards:
    get:
      tags: [giftcards]
      summary: List giftcards
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
        - in: query
          name: code
          schema: { type: string }
          description: Exact code lookup (optional)
        - $ref: '#/components/parameters/IncludeInactive'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Giftcards
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Giftcard' }
    post:
      tags: [giftcards]
      summary: Issue a new giftcard
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GiftcardCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Giftcard' }

  /giftcards/{id}:
    get:
      tags: [giftcards]
      summary: Get giftcard
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Giftcard
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Giftcard' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      tags: [giftcards]
      summary: Update giftcard (e.g., deactivate)
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isActive: { type: boolean }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Giftcard' }
    delete:
      tags: [giftcards]
      summary: Delete giftcard
      description: Soft-delete (set inactive). Idempotent.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Deleted }
        '409': { $ref: '#/components/responses/Conflict' }

  /giftcards/{id}/restore:
    post:
      tags: [giftcards]
      summary: Restore giftcard
      description: Reactivate a soft-deleted giftcard.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }

  /payments/{paymentId}/giftcards:
    post:
      tags: [giftcards]
      summary: Attach a giftcard to a payment with the amount used
      parameters:
        - $ref: '#/components/parameters/PaymentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [giftcardId, amountUsed]
              properties:
                giftcardId: { type: string }
                amountUsed: { type: number, format: float }
      responses:
        '204': { description: Attached }

    get:
      tags: [giftcards]
      summary: List giftcards used in a payment
      parameters:
        - $ref: '#/components/parameters/PaymentId'
      responses:
        '200':
          description: Giftcards used
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/GiftcardPayment' }

  # ----------------- Discounts (catalog rules) -----------------
  /discounts:
    get:
      tags: [discounts]
      summary: List discounts
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
        - in: query
          name: scope
          schema: { $ref: '#/components/schemas/DiscountScope' }
        - in: query
          name: active
          schema: { type: boolean }
        - $ref: '#/components/parameters/IncludeInactive'
        - $ref: '#/components/parameters/From'
        - $ref: '#/components/parameters/To'
      responses:
        '200':
          description: Discounts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Discount' }
    post:
      tags: [discounts]
      summary: Create discount rule
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DiscountCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Discount' }

  /discounts/{id}:
    get:
      tags: [discounts]
      summary: Get discount
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Discount
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Discount' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      tags: [discounts]
      summary: Update discount
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DiscountUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Discount' }
    delete:
      tags: [discounts]
      summary: Delete discount
      description: Soft-delete (set inactive). Idempotent.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Deleted }
        '409': { $ref: '#/components/responses/Conflict' }

  /discounts/{id}/restore:
    post:
      tags: [discounts]
      summary: Restore discount
      description: Reactivate a soft-deleted discount.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }

  # ----------------- Service charge policies & order linkage -----------------
  /service-charge-policies:
    get:
      tags: [service-charges]
      summary: List service charge policies
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
        - in: query
          name: active
          schema: { type: boolean }
        - $ref: '#/components/parameters/IncludeInactive'
      responses:
        '200':
          description: Policies
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ServiceChargePolicy' }
    post:
      tags: [service-charges]
      summary: Create service charge policy
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ServiceChargePolicyCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/ServiceChargePolicy' }

  /service-charge-policies/{id}:
    get:
      tags: [service-charges]
      summary: Get policy
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Policy
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/ServiceChargePolicy' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      tags: [service-charges]
      summary: Update policy
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ServiceChargePolicyUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/ServiceChargePolicy' }
    delete:
      tags: [service-charges]
      summary: Delete policy
      description: Soft-delete (set inactive). Idempotent.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Deleted }
        '409': { $ref: '#/components/responses/Conflict' }

  /service-charge-policies/{id}/restore:
    post:
      tags: [service-charges]
      summary: Restore policy
      description: Reactivate a soft-deleted service charge policy.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }

  /orders/{orderId}/service-charge-policies:
    get:
      tags: [service-charges]
      summary: List service charge policies attached to an order
      parameters:
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: Policies on order
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ServiceChargePolicy' }
    post:
      tags: [service-charges]
      summary: Attach a service charge policy to an order
      parameters:
        - $ref: '#/components/parameters/OrderId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [policyId]
              properties:
                policyId: { type: string }
      responses:
        '204': { description: Attached }
    delete:
      tags: [service-charges]
      summary: Detach a policy from an order
      parameters:
        - $ref: '#/components/parameters/OrderId'
        - in: query
          name: policyId
          required: true
          schema: { type: string }
      responses:
        '204': { description: Detached }

  # ----------------- Pricing & Tax -----------------
  /pricing/policies:
    get:
      tags: [pricing]
      summary: List business pricing policies
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
        - $ref: '#/components/parameters/IncludeInactive'
      responses:
        '200':
          description: Pricing policies
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/BusinessPricingPolicy' }
    post:
      tags: [pricing]
      summary: Create pricing policy
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BusinessPricingPolicyCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/BusinessPricingPolicy' }

  /pricing/policies/{id}:
    get:
      tags: [pricing]
      summary: Get a business pricing policy
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Pricing policy
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BusinessPricingPolicy'
        '404': { $ref: '#/components/responses/NotFound' }

    patch:
      tags: [pricing]
      summary: Update a business pricing policy
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BusinessPricingPolicyUpdate' }
      responses:
        '200':
          description: Updated policy
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BusinessPricingPolicy'
        '404': { $ref: '#/components/responses/NotFound' }

    delete:
      tags: [pricing]
      summary: Delete a business pricing policy
      description: Soft-delete (set inactive). Idempotent.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Deleted }
        '409': { $ref: '#/components/responses/Conflict' }

  /pricing/policies/{id}/restore:
    post:
      tags: [pricing]
      summary: Restore a business pricing policy
      description: Reactivate a soft-deleted pricing policy.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }

  /tax/categories:
    get:
      tags: [tax]
      summary: List tax categories
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
        - $ref: '#/components/parameters/IncludeInactive'
      responses:
        '200':
          description: Categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/TaxCategory' }
    post:
      tags: [tax]
      summary: Create tax category
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaxCategoryCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/TaxCategory' }

  /tax/categories/{id}:
    get:
      tags: [tax]
      summary: Get tax category
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Category
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/TaxCategory' }
    patch:
      tags: [tax]
      summary: Update tax category
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaxCategoryUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/TaxCategory' }
    delete:
      tags: [tax]
      summary: Delete tax category
      description: Soft-delete (set inactive). Idempotent.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Deleted }
        '409': { $ref: '#/components/responses/Conflict' }

  /tax/categories/{id}/restore:
    post:
      tags: [tax]
      summary: Restore tax category
      description: Reactivate a soft-deleted tax category.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }

  /tax/rates:
    get:
      tags: [tax]
      summary: List tax rates (optionally as-of filter)
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
        - in: query
          name: taxCategoryId
          schema: { type: string }
        - in: query
          name: asOf
          schema: { type: string, format: date-time }
          description: Return the rate effective at this time (server chooses best match)
        - $ref: '#/components/parameters/IncludeInactive'
      responses:
        '200':
          description: Rates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/TaxRate' }
    post:
      tags: [tax]
      summary: Create tax rate
      parameters:
        - $ref: '#/components/parameters/MerchantScopeHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaxRateCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/TaxRate' }

  /tax/rates/{id}:
    get:
      tags: [tax]
      summary: Get tax rate
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Rate
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/TaxRate' }
    patch:
      tags: [tax]
      summary: Update tax rate
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaxRateUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/TaxRate' }
    delete:
      tags: [tax]
      summary: Delete tax rate
      description: Soft-delete (set inactive). Idempotent.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Deleted }
        '409': { $ref: '#/components/responses/Conflict' }

  /tax/rates/{id}/restore:
    post:
      tags: [tax]
      summary: Restore tax rate
      description: Reactivate a soft-deleted tax rate.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }

  # ----------------- Plans & Features -----------------
  /plans:
    get:
      tags: [plans]
      summary: List plans
      parameters:
        - $ref: '#/components/parameters/IncludeInactive'
      responses:
        '200':
          description: Plans
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Plan' }
    post:
      tags: [plans]
      summary: Create plan (admin)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PlanCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Plan' }

  /plans/{id}:
    get:
      tags: [plans]
      summary: Get plan
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Plan
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Plan' }
    patch:
      tags: [plans]
      summary: Update plan
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PlanUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Plan' }
    delete:
      tags: [plans]
      summary: Delete plan
      description: Soft-delete (set inactive). Idempotent.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Deleted }
        '409': { $ref: '#/components/responses/Conflict' }

  /plans/{id}/restore:
    post:
      tags: [plans]
      summary: Restore plan
      description: Reactivate a soft-deleted plan.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }

  /plans/{planId}/features:
    parameters:
      - $ref: '#/components/parameters/PlanId'
    get:
      tags: [plans, features]
      summary: List features attached to a plan (includes join attributes)
      responses:
        '200':
          description: Features on the plan
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        feature: { $ref: '#/components/schemas/Feature' }
                        locationLimit:
                          type: integer
                          nullable: true
                          description: Plan_feature.location_limit
        '404': { $ref: '#/components/responses/NotFound' }

  /plans/{planId}/features/{featureId}:
    parameters:
      - $ref: '#/components/parameters/PlanId'
      - $ref: '#/components/parameters/FeatureId'
    put:
      tags: [plans, features]
      summary: Attach or update a feature on a plan
      description: Upsert the Plan_feature row for (planId, featureId). Idempotent.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                locationLimit:
                  type: integer
                  nullable: true
                  description: Plan_feature.location_limit
      responses:
        '200':
          description: Attached/updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      planId: { type: string }
                      featureId: { type: string }
                      locationLimit:
                        type: integer
                        nullable: true
        '404': { $ref: '#/components/responses/NotFound' }

    delete:
      tags: [plans, features]
      summary: Detach a feature from a plan
      responses:
        '204': { description: Detached }
        '404': { $ref: '#/components/responses/NotFound' }

  /features:
    get:
      tags: [features]
      summary: List features
      parameters:
        - $ref: '#/components/parameters/IncludeInactive'
      responses:
        '200':
          description: Features
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Feature' }
    post:
      tags: [features]
      summary: Create feature
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/FeatureCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Feature' }

  /features/{id}:
    get:
      tags: [features]
      summary: Get feature
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Feature
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Feature' }
        '404': { $ref: '#/components/responses/NotFound' }

    patch:
      tags: [features]
      summary: Update feature
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/FeatureUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Feature' }
        '404': { $ref: '#/components/responses/NotFound' }

    delete:
      tags: [features]
      summary: Delete feature
      description: Soft-delete (set inactive). Idempotent.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Deleted }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /features/{id}/restore:
    post:
      tags: [features]
      summary: Restore feature
      description: Reactivate a soft-deleted feature.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Restored }
        '404': { $ref: '#/components/responses/NotFound' }

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:

    IdempotencyKey:
      in: header
      name: Idempotency-Key
      required: false
      schema: { type: string, maxLength: 255 }
      description: Ensures at-most-once execution of POST/DELETE/restore actions within a 24h window.
    MerchantScopeHeader:
      in: header
      name: X-Merchant-Id
      required: false
      schema: { type: string }
      description: |
        Tenant scope. If caller is super_admin, this selects the merchant. Otherwise it is ignored and the server uses user.merchantId.
    Id:
      in: path
      name: id
      required: true
      schema: { type: string }
    UserId:
      in: path
      name: userId
      required: true
      schema: { type: string }
    MerchantId:
      in: path
      name: merchantId
      required: true
      schema: { type: string }
    SubscriptionId:
      in: path
      name: subscriptionId
      required: true
      schema: { type: string }
    ServiceId:
      in: path
      name: serviceId
      required: true
      schema: { type: string }
    OrderId:
      in: path
      name: orderId
      required: true
      schema: { type: string }
    ItemId:
      in: path
      name: itemId
      required: true
      schema: { type: string }
    PaymentId:
      in: path
      name: paymentId
      required: true
      schema: { type: string }
    TipId:
      in: path
      name: tipId
      required: true
      schema: { type: string }
    RoleFilter:
      in: query
      name: role
      required: false
      schema: { $ref: '#/components/schemas/Role' }
    From:
      in: query
      name: from
      schema: { type: string, format: date-time }
    To:
      in: query
      name: to
      schema: { type: string, format: date-time }
    Limit:
      in: query
      name: limit
      schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
    Offset:
      in: query
      name: offset
      schema: { type: integer, minimum: 0, default: 0 }
    PlanId:
      in: path
      name: planId
      required: true
      schema: { type: string }
    FeatureId:
      in: path
      name: featureId
      required: true
      schema: { type: string }
    IncludeInactive:
      in: query
      name: includeInactive
      schema: { type: boolean, default: false }
      description: Include inactive (soft-deleted) records in responses

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Unauthorized:
      description: Not authenticated
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Forbidden:
      description: Not authorized
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Conflict:
      description: Conflict
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  schemas:
    # ----------- Enums -----------
    Role:
      type: string
      enum: [OWNER, MANAGER, EMPLOYEE]
    OrderStatus:
      type: string
      enum: [OPEN, CANCELLED, CLOSED, REFUNDED]
      description: Computed from timestamps (opened/closed/cancelled/refunded)
    DiscountScope:
      type: string
      enum: [ORDER, ITEM]
    DiscountType:
      type: string
      enum: [PERCENT, FIXED]
    PaymentMethod:
      type: string
      enum: [CASH, CARD, GIFT_CARD]
    PaymentStatus:
      type: string
      enum: [PENDING, SUCCEEDED, FAILED, REFUNDED]
    ServiceChargeType:
      type: string
      enum: [PERCENT, FIXED]
    TipSource:
      type: string
      enum: [CASH, CARD, GIFT_CARD, OTHER]
    AppointmentStatus:
      type: string
      enum: [BOOKED, CANCELLED, COMPLETED, NO_SHOW]

    Error:
      type: object
      properties:
        code: { type: string }
        message: { type: string }
        details:
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              issue: { type: string }

    # ----------- Auth -----------
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }
    LoginResponse:
      type: object
      properties:
        data:
          type: object
          required: [accessToken, refreshToken, expiresIn, tokenType, user]
          properties:
            accessToken: { type: string }
            refreshToken: { type: string }
            expiresIn: { type: integer, example: 3600 }
            tokenType: { type: string, example: Bearer }
            user: { $ref: '#/components/schemas/User' }

    RefreshToken:
      type: object
      properties:
        id: { type: string }
        userId: { type: string }
        createdAt: { type: string, format: date-time }
        expiresAt: { type: string, format: date-time }
        revokedAt:
          type: string
          format: date-time
          nullable: true

    # ----------- Core domain -----------
    User:
      type: object
      properties:
        id: { type: string }
        merchantId: { type: string }
        email: { type: string, format: email }
        name: { type: string }
        surname: { type: string, nullable: true }
        phoneNumber: { type: string, nullable: true }
        lastLoginAt: { type: string, format: date-time, readOnly: true }
        role: { $ref: '#/components/schemas/Role' }
        isSuperAdmin: { type: boolean }
        isActive: { type: boolean, default: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    Merchant:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        ownerId: { type: string, nullable: true }
        businessType: { type: string, nullable: true }
        country: { type: string, nullable: true }
        address: { type: string, nullable: true }
        city: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        email: { type: string, format: email, nullable: true }
        isActive: { type: boolean, default: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    MerchantCreate:
      type: object
      required: [name]
      properties:
        name: { type: string }
        ownerId: { type: string, nullable: true }
        businessType: { type: string, nullable: true }
        country: { type: string, nullable: true }
        address: { type: string, nullable: true }
        city: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        email: { type: string, format: email, nullable: true }

    MerchantUpdate:
      type: object
      properties:
        name: { type: string }
        isActive: { type: boolean }
        ownerId: { type: string, nullable: true }
        businessType: { type: string, nullable: true }
        country: { type: string, nullable: true }
        address: { type: string, nullable: true }
        city: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        email: { type: string, format: email, nullable: true }

    MerchantSubscription:
      type: object
      properties:
        id: { type: string }
        merchantId: { type: string }
        planId: { type: string }
        startsAt: { type: string, format: date-time }
        endsAt: { type: string, format: date-time, nullable: true }
        status:
          type: string
          enum: [ACTIVE, CANCELLED, EXPIRED, SCHEDULED]
        isActive: { type: boolean }
    # ----------- Customers -----------
    Customer:
      type: object
      properties:
        id: { type: string }
        merchantId: { type: string, readOnly: true }
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string, format: email, nullable: true }
        phone: { type: string, nullable: true }
        isActive: { type: boolean, default: true }
        deletedAt: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    CustomerCreate:
      type: object
      required: [firstName]
      properties:
        firstName: { type: string }
        lastName: { type: string }
        email:
          type: string
          format: email
          nullable: true
        phone:
          type: string
          nullable: true

    CustomerUpdate:
      type: object
      properties:
        firstName: { type: string }
        lastName: { type: string }
        email:
          type: string
          format: email
          nullable: true
        phone:
          type: string
          nullable: true
        isActive: { type: boolean }

    # ----------- Catalog: Products -----------
    Product:
      type: object
      properties:
        id: { type: string }
        merchantId: { type: string, readOnly: true }
        name: { type: string }
        category: { type: string, nullable: true }
        description: { type: string, nullable: true }
        price: { type: number }
        taxCategoryId: { type: string, nullable: true }
        isActive: { type: boolean, default: true }
        deletedAt: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    ProductCreate:
      type: object
      required: [name, price]
      properties:
        name: { type: string }
        category: { type: string, nullable: true }
        description: { type: string, nullable: true }
        price: { type: number }
        taxCategoryId: { type: string, nullable: true }

    ProductUpdate:
      type: object
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        price: { type: number }
        taxCategoryId: { type: string, nullable: true }
        isActive: { type: boolean }

    # ----------- Catalog: Services -----------
    Service:
      type: object
      properties:
        id: { type: string }
        merchantId: { type: string, readOnly: true }
        name: { type: string }
        durationMinutes: { type: integer, minimum: 1 }
        defaultPrice: { type: number, nullable: true }
        taxCategoryId: { type: string, nullable: true }
        isActive: { type: boolean, default: true }

    ServiceCreate:
      required: [name, durationMinutes]
      properties:
        name: { type: string }
        durationMinutes: { type: integer, minimum: 1 }
        defaultPrice: { type: number, nullable: true }  
        taxCategoryId: { type: string, nullable: true }

    ServiceUpdate:
      type: object
      properties:
        name: { type: string }
        durationMinutes: { type: integer, minimum: 1 }
        defaultPrice: { type: number, nullable: true }
        taxCategoryId: { type: string, nullable: true }
        isActive: { type: boolean }

    # ----------- Reservations -----------
    Reservation:
      type: object
      properties:
        id: { type: string }
        customerId: { type: string }
        employeeId: { type: string, nullable: true }
        serviceId: { type: string }
        startAt: { type: string, format: date-time }
        endAt: { type: string, format: date-time, nullable: true }
        status: { $ref: '#/components/schemas/AppointmentStatus' }
        bookedAt: { type: string, format: date-time, readOnly: true }
        isActive: { type: boolean, default: true }
        deletedAt: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    ReservationCreate:
      type: object
      required: [customerId, serviceId, startAt]
      properties:
        customerId: { type: string }
        employeeId:
          type: string
          nullable: true
        serviceId: { type: string }
        startAt: { type: string, format: date-time }
        notes:
          type: string
          nullable: true

    ReservationUpdate:
      type: object
      properties:
        startAt: { type: string, format: date-time }
        endAt:
          type: string
          format: date-time
          nullable: true
        status: { $ref: '#/components/schemas/AppointmentStatus' }
        notes:
          type: string
          nullable: true
        isActive: { type: boolean }

    # ----------- Orders & items -----------
    Order:
      properties:
        id: { type: string }
        customerId: { type: string, nullable: true }
        employeeId: { type: string, nullable: true }
        businessPricingPolicyId: { type: string, nullable: true } 
        wholeOrderDiscountId: { type: string, nullable: true, readOnly: true } 
        status: { $ref: '#/components/schemas/OrderStatus' }
        subtotal: { type: number }
        tax: { type: number }
        total: { type: number }
        openedAt: { type: string, format: date-time }
        cancelledAt: { type: string, format: date-time, nullable: true }
        closedAt: { type: string, format: date-time, nullable: true }
        # refundedAt REMOVED
    OrderCreate:
      properties:
        customerId: { type: string, nullable: true }
        employeeId: { type: string, nullable: true }
        businessPricingPolicyId: { type: string, nullable: true }    
        note: { type: string, nullable: true }
    OrderUpdate:
      properties:
        cancel: { type: boolean }
        close:  { type: boolean }
        businessPricingPolicyId: { type: string, nullable: true }    

    OrderItem:
      type: object
      properties:
        id: { type: string }
        orderId: { type: string }
        productId: { type: string, nullable: true }
        serviceId: { type: string, nullable: true }
        reservationId: { type: string, nullable: true }
        quantity: { type: number }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    OrderItemCreate:
      type: object
      required: [quantity]
      properties:
        productId: { type: string, nullable: true }
        serviceId: { type: string, nullable: true }
        reservationId: { type: string, nullable: true }
        quantity: { type: number, default: 1 }
      oneOf:
        - required: [productId]
        - required: [serviceId]

    OrderItemUpdate:
      type: object
      properties:
        quantity: { type: number }
        reservationId: { type: string, nullable: true }

    # ----------- Tips -----------
    OrderTip:
      type: object
      properties:
        id: { type: string }
        orderId: { type: string }
        source: { $ref: '#/components/schemas/TipSource' }
        amount: { type: number }
        createdAt: { type: string, format: date-time }

    OrderTipCreate:
      type: object
      required: [source, amount]
      properties:
        source: { $ref: '#/components/schemas/TipSource' }
        amount: { type: number }

    # ----------- Payments & refunds -----------
    Payment:
      type: object
      properties:
        id: { type: string }
        orderId: { type: string }
        provider: { type: string, nullable: true }
        method: { $ref: '#/components/schemas/PaymentMethod' }
        status: { $ref: '#/components/schemas/PaymentStatus' }
        amount: { type: number }
        currency: { type: string }
        isActive: { type: boolean, default: true }
        deletedAt: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        
        
    PaymentCreate:
      type: object
      required: [method, amount, currency]
      properties:
        provider: { type: string, nullable: true }
        method: { $ref: '#/components/schemas/PaymentMethod' }
        amount: { type: number }
        currency: { type: string }

    PaymentUpdate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PaymentStatus'
          description: Server enforces valid state transitions (e.g., PENDINGâ†’SUCCEEDED/FAILED, SUCCEEDEDâ†’REFUNDED).

    Refund:
      type: object
      properties:
        id: { type: string }
        paymentId: { type: string }
        amount: { type: number }
        reason:
          type: string
          nullable: true
        isActive: { type: boolean, default: true }
        deletedAt:
          type: string
          format: date-time
          nullable: true
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    RefundCreate:
      type: object
      required: [amount]
      properties:
        amount: { type: number }
        reason:
          type: string
          nullable: true

    RefundUpdate:
      type: object
      properties:
        amount:
          type: number
          description: Only if not settled; server validates remaining refundable amount.
        reason:
          type: string
          nullable: true

    # ----------- Giftcards -----------
    Giftcard:
      properties:
        id: { type: string }
        merchantId: { type: string }                
        code: { type: string }
        initialBalance: { type: number }             
        balance: { type: number }
        issuedAt: { type: string, format: date-time }
        expiresAt: { type: string, format: date-time, nullable: true }
        isActive: { type: boolean, default: true }
        deletedAt: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    GiftcardCreate:
      required: [initialBalance]
      properties:
        initialBalance: { type: number }            
        code: { type: string, nullable: true }

    GiftcardPayment:
      type: object
      properties:
        paymentId: { type: string }
        giftcardId: { type: string }
        amountUsed: { type: number }

    # ----------- Discounts (catalog rules) -----------
    Discount:
      properties:
        id: { type: string }
        name: { type: string }
        code: { type: string, nullable: true }          
        scope: { $ref: '#/components/schemas/DiscountScope' }
        type: { $ref: '#/components/schemas/DiscountType' }
        value: { type: number }
        productId: { type: string, nullable: true }      
        serviceId: { type: string, nullable: true }      
        startsAt: { type: string, format: date-time, nullable: true }
        endsAt: { type: string, format: date-time, nullable: true }
        isActive: { type: boolean, default: true }
        deletedAt: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    DiscountCreate:
      required: [name, scope, type, value]
      properties:
        name: { type: string }
        code: { type: string, nullable: true }           
        scope: { $ref: '#/components/schemas/DiscountScope' }
        type: { $ref: '#/components/schemas/DiscountType' }
        value: { type: number }
        productId: { type: string, nullable: true }     
        serviceId: { type: string, nullable: true }     
        startsAt: { type: string, format: date-time, nullable: true }
        endsAt: { type: string, format: date-time, nullable: true }

    DiscountUpdate:
      type: object
      properties:
        name: { type: string }
        scope: { $ref: '#/components/schemas/DiscountScope' }
        type: { $ref: '#/components/schemas/DiscountType' }
        value: { type: number }
        startsAt:
          type: string
          format: date-time
          nullable: true
        endsAt:
          type: string
          format: date-time
          nullable: true
        isActive: { type: boolean }

    # ----------- Service charge policies -----------
    ServiceChargePolicy:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        type: { $ref: '#/components/schemas/ServiceChargeType' }
        value: { type: number }
        isActive: { type: boolean, default: true }
        deletedAt:
          type: string
          format: date-time
          nullable: true
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    ServiceChargePolicyCreate:
      type: object
      required: [name, type, value]
      properties:
        name: { type: string }
        type: { $ref: '#/components/schemas/ServiceChargeType' }
        value: { type: number }

    ServiceChargePolicyUpdate:
      type: object
      properties:
        name: { type: string }
        type: { $ref: '#/components/schemas/ServiceChargeType' }
        value: { type: number }
        isActive: { type: boolean }

    # ----------- Pricing policies -----------
    BusinessPricingPolicy:
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        unitPriceIncludesTax: { type: boolean }                  
        moneyRoundingMode:                                       
          type: string
          enum: [UP, DOWN, NEAREST, BANKERS]
        isActive: { type: boolean, default: true }
        deletedAt: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    BusinessPricingPolicyCreate:
      required: [name, unitPriceIncludesTax, moneyRoundingMode]  
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        unitPriceIncludesTax: { type: boolean }
        moneyRoundingMode:
          type: string
          enum: [UP, DOWN, NEAREST, BANKERS]

    BusinessPricingPolicyUpdate:
      type: object
      properties:
        name: { type: string }
        description:
          type: string
          nullable: true
        isActive: { type: boolean }

    # ----------- Tax -----------
    TaxCategory:
      type: object
      properties:
        id: { type: string }
        merchantId: { type: string, readOnly: true }
        name: { type: string }
        isActive: { type: boolean, default: true }
        deletedAt: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        
    TaxCategoryCreate:
      type: object
      required: [name]
      properties:
        name: { type: string }

    TaxCategoryUpdate:
      type: object
      properties:
        name: { type: string }
        isActive: { type: boolean }

    TaxRate:
      type: object
      properties:
        id: { type: string }
        taxCategoryId: { type: string }
        label:
          type: string
          nullable: true
        rate: { type: number, description: 'Decimal (e.g., 0.085 for 8.5%)' }
        effectiveFrom: { type: string, format: date-time }
        effectiveTo:
          type: string
          format: date-time
          nullable: true
        isActive: { type: boolean, default: true }
        deletedAt:
          type: string
          format: date-time
          nullable: true
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    TaxRateCreate:
      type: object
      required: [taxCategoryId, rate, effectiveFrom]
      properties:
        taxCategoryId: { type: string }
        label:
          type: string
          nullable: true
        rate: { type: number }
        effectiveFrom: { type: string, format: date-time }
        effectiveTo:
          type: string
          format: date-time
          nullable: true

    TaxRateUpdate:
      type: object
      properties:
        label:
          type: string
          nullable: true
        rate: { type: number }
        effectiveTo:
          type: string
          format: date-time
          nullable: true
        isActive: { type: boolean }

    # ----------- Plans & features -----------
    Plan:
      properties:
        id: { type: string }
        name: { type: string }
        price: { type: number }                         
        billingPeriod:                                   
          type: string
          enum: [MONTHLY, YEARLY]
        isActive: { type: boolean, default: true }
        deletedAt: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    PlanCreate:
      required: [name, price, billingPeriod]            
      properties:
        name: { type: string }
        price: { type: number }                         
        billingPeriod:
          type: string
          enum: [MONTHLY, YEARLY]
          
    PlanUpdate:
      type: object
      properties:
        name: { type: string }
        isActive: { type: boolean }

    Feature:
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        isActive: { type: boolean, default: true }
        deletedAt: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    FeatureCreate:
      required: [name]                                  
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
    FeatureUpdate:
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        isActive: { type: boolean }
